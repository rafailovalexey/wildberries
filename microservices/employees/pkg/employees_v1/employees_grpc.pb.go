// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: employees_v1/employees.proto

package employees_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeesV1Client is the client API for EmployeesV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeesV1Client interface {
	GetEmployeeById(ctx context.Context, in *GetEmployeeByIdRequest, opts ...grpc.CallOption) (*GetEmployeeByIdResponse, error)
	CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type employeesV1Client struct {
	cc grpc.ClientConnInterface
}

func NewEmployeesV1Client(cc grpc.ClientConnInterface) EmployeesV1Client {
	return &employeesV1Client{cc}
}

func (c *employeesV1Client) GetEmployeeById(ctx context.Context, in *GetEmployeeByIdRequest, opts ...grpc.CallOption) (*GetEmployeeByIdResponse, error) {
	out := new(GetEmployeeByIdResponse)
	err := c.cc.Invoke(ctx, "/employees_v1.EmployeesV1/GetEmployeeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesV1Client) CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/employees_v1.EmployeesV1/CreateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeesV1Server is the server API for EmployeesV1 service.
// All implementations must embed UnimplementedEmployeesV1Server
// for forward compatibility
type EmployeesV1Server interface {
	GetEmployeeById(context.Context, *GetEmployeeByIdRequest) (*GetEmployeeByIdResponse, error)
	CreateEmployee(context.Context, *CreateEmployeeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEmployeesV1Server()
}

// UnimplementedEmployeesV1Server must be embedded to have forward compatible implementations.
type UnimplementedEmployeesV1Server struct {
}

func (UnimplementedEmployeesV1Server) GetEmployeeById(context.Context, *GetEmployeeByIdRequest) (*GetEmployeeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeById not implemented")
}
func (UnimplementedEmployeesV1Server) CreateEmployee(context.Context, *CreateEmployeeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedEmployeesV1Server) mustEmbedUnimplementedEmployeesV1Server() {}

// UnsafeEmployeesV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeesV1Server will
// result in compilation errors.
type UnsafeEmployeesV1Server interface {
	mustEmbedUnimplementedEmployeesV1Server()
}

func RegisterEmployeesV1Server(s grpc.ServiceRegistrar, srv EmployeesV1Server) {
	s.RegisterService(&EmployeesV1_ServiceDesc, srv)
}

func _EmployeesV1_GetEmployeeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesV1Server).GetEmployeeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employees_v1.EmployeesV1/GetEmployeeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesV1Server).GetEmployeeById(ctx, req.(*GetEmployeeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeesV1_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesV1Server).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employees_v1.EmployeesV1/CreateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesV1Server).CreateEmployee(ctx, req.(*CreateEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeesV1_ServiceDesc is the grpc.ServiceDesc for EmployeesV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeesV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "employees_v1.EmployeesV1",
	HandlerType: (*EmployeesV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmployeeById",
			Handler:    _EmployeesV1_GetEmployeeById_Handler,
		},
		{
			MethodName: "CreateEmployee",
			Handler:    _EmployeesV1_CreateEmployee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employees_v1/employees.proto",
}
